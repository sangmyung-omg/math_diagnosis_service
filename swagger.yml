openapi: '3.0.2'
info:
  title: WAPL Math SAP API
  version: '0.1.0'
  description: |
    지식 수준, 진단고사, 시험 대비 추천 관련 API
servers:
  - url: http://192.168.153.154:8080/
    description: "example server address"
tags:
- name : 'Diagnosis'
  description: "진단고사 API"
- name : 'Mastery'
  description: "학생 지식 수준 업데이트 API"
- name : 'Schedule'
  description: "학습 스케줄 카드 추천 API"
- name : 'User'
  description: "문제 추천을 위한 사용자 정보 입력 API"
- name : 'Additional Learning'
  description: "추가학습(완벽학습) 카드 추천 API"
paths:
  /diagnosis:
    get:
      tags: [Diagnosis]
      operationId: DiagnosisProblemsGet
      summary: 진단고사 문제 전체 요청
      parameters:
        - $ref: "#/components/parameters/UserToken"
        - $ref:  "#/components/parameters/DiagnosisType"
      responses:
        200:
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagnosisProblemsResult'
        500:
          description: 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultMessage:
                    type: string
                    example: "Error: status code 500"                
  /diagnosis/extra:
    get:
      tags: [Diagnosis]
      operationId: ExtraProblemsGet
      summary: 시간 남을 경우, 추가 5 문제 요청
      description: "[꼼꼼진단] 앞선 10문제의 진단문제 소요시간이 15분 미만일 경우, 다음 시험 범위와 연관된 범위에서 추가 5문제 제공"
      parameters:
        - $ref: "#/components/parameters/UserToken"
        - $ref: "#/components/parameters/ProbIdList"
      responses:
        200:
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtraProblemsResult'
        500:
          description: 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultMessage:
                    type: string
                    example: "Error: status code 500"
  /mastery:
    put:
      tags:
        - "Mastery"
      summary: "학생 문제 풀이 결과 기반 지식 수준 업데이트"
      description: |
        Triton Server를 활용하여 학생 지식 수준을 업데이트 함
      parameters:
        - $ref: "#/components/parameters/UserToken"
      requestBody:
        $ref: "#/components/requestBodies/ProblemSolveRecord"
      responses:
        "200":
          description: "성공 시"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasteryUpdateResult"
        "500":
          description: "오류 발생 시"
          $ref: "#/components/responses/500-Generic" 
  /recommend/v2/examschedulecard:
    get:
      tags:
        - "Schedule"
      summary: "시험 대비 학습 스케줄 카드 구성 리턴 v2"
      description: |
        - 사용자의 시험 대비 학습 스케줄 오늘 카드 구성 리턴
        - 21.06.30 기획 반영
        - Full path = http://192.168.153.154:8080/recommend/v2/examschedulecard
      parameters:
        - $ref: "#/components/parameters/UserToken"
      responses:
        "200":
          description: "성공 시"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NormalScheduleCardV2"
        "500":
          description: "오류 발생 시"
          $ref: "#/components/responses/500-Generic"
  /recommend/v1/normalschedulecard:
    get:
      tags:
        - "Schedule"
      summary: "실력 향상 학습 스케줄 카드 구성 리턴 v1"
      description: |
        - 사용자의 실력 향상 학습 스케줄 오늘 카드 구성 리턴
        - Full path = http://192.168.153.154:8080/recommend/v1/normalschedulecard
      parameters:
        - $ref: "#/components/parameters/UserToken"
      responses:
        "200":
          description: "성공 시"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NormalScheduleCardV1"
        "500":
          description: "오류 발생 시"
          $ref: "#/components/responses/500-Generic"
  /recommend/v2/normalschedulecard:
    get:
      tags:
        - "Schedule"
      summary: "실력 향상 학습 스케줄 카드 구성 리턴 v2"
      description: |
        - 사용자의 실력 향상 학습 스케줄 카드 구성 리턴
        - 21.06.30 기획 반영
        - Full path = http://192.168.153.154:8080/recommend/v2/normalschedulecard
      parameters:
        - $ref: "#/components/parameters/UserToken"
      responses:
        "200":
          description: "성공 시"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NormalScheduleCardV2"
        "500":
          description: "오류 발생 시"
          $ref: "#/components/responses/500-Generic"
  /userexaminfo:
    put:
      tags:
        - 'User'
      summary: "학생 시험 정보 입력"
      description: 
        학생이 시험 대비 진입 시 입력한 시험 정보 동기화
      parameters:
        - $ref: "#/components/parameters/UserToken"
      requestBody:
        $ref: "#/components/requestBodies/UserExamInfo"
      responses:
        "200":
          description: "성공 시"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserExamInfoResult"
        "500":
          description: "오류 발생 시"
          $ref: "#/components/responses/500-Generic" 
  /userbasicinfo:
    put:
      tags:
        - User
      summary: 학생 기본 정보 입력
      description: 학년, 이름 정보 동기화
      parameters:
        - $ref: "#/components/parameters/UserToken"
      requestBody:
        $ref:  "#/components/requestBodies/UserBasicInfo"
      responses:
        "200":
          description: "성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserBasicInfoResult"
        "500":
          description: "실패"
          $ref: "#/components/responses/500-Generic"

  /frequent:
    get:
      tags:
        - Additional Learning
      summary: "빈출카드 추천"
      description: "완벽학습에서 빈출 카드 제공"
      parameters:
        - $ref: "#/components/parameters/UserToken"
        - $ref:  "#/components/parameters/IsFirstFreq"
      responses:
        "200":
          description: "성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrequentCardResult"
        "500":
          description: "실패"
          $ref: "#/components/responses/500-Generic"

components:
  schemas:
    DiagnosisProblemsResult:
      properties:
        resultMessage:
          type: string
          example: "Successfully Returned"
        diagnosisProblems:
          type: array
          description: 순서 = '하', '중', '상'
          example:
            - [2552,1371,1633]
            - [1234,5678,9101]
            - [1121,3141,5161]
            - [7181,9202,1222]
            - [3242,5262,7282]
    ExtraProblemsResult:
      properties:
        resultMessage:
          type: string
          example: "Successfully Returned"
        extraProblems:
          type: integer
          example: 
            - 9101
            - 1234
            - 5678
            - 2345
            - 3456
    ExamScheduleCard:
      type: "object"
      description: "오늘의 시험 대비 학습 스케줄 카드 구성 정보"
      required:
        - "message"
        - "remainTypeCard"
        - "cardList"
      properties:
        message:
          type: "string"
          example: "Successfully returned today exam card."
          description: "결과 메시지"
        remainTypeCard:
          type: number
          example: 30
          description: "진도에서 남은 유형 카드 개수"
        cardList:
          type: "array"
          description: "오늘 카드 목록"
          items:
            $ref: "#/components/schemas/CardObjectV1"
    NormalScheduleCardV1:
      type: "object"
      description: "오늘의 실력 향상 학습 스케줄 카드 구성 정보"
      required:
        - "message"
        - "cardList"
      properties:
        message:
          type: "string"
          example: "Successfully returned today exam card."
          description: "결과 메시지"
        cardList:
          type: "array"
          description: "오늘 카드 목록"
          items:
            $ref: "#/components/schemas/CardObjectV1"
    NormalScheduleCardV2:
      type: "object"
      description: "오늘의 실력 향상 학습 스케줄 카드 구성 정보"
      required:
        - "message"
        - "cardList"
      properties:
        message:
          type: "string"
          example: "Successfully returned today exam card."
          description: "결과 메시지"
        cardList:
          type: "array"
          description: "오늘 카드 목록"
          items:
            $ref: "#/components/schemas/CardObjectV2"
    CardObjectV1:
      type: "object"
      description: "카드 정보. 유형/보충은 4-6문제, 중간평가/모의고사는 20문제"
      required:
        - "cardType"
        - "cardTitle"
        - "firstProbLevel"
        - "estimatedTime"
        - "cardScore"
        - "cardDetail"
        - "probIdSetList"
      properties:
        cardType:
          type: "string"
          example: "type"
          enum:
            - "type"
            - "supple"
            - "midExam"
            - "trialExam"
          description: "카드 종류"
        cardTitle:
          type: "string"
          example: "유한소수와 무한소수"
          description: "카드 이름. UI 가이드 참고"
        firstProbLevel:
          type: "string"
          example: "high"
          description: "학생의 이해도 기반, 첫 번째 문제의 난이도"
          enum:
            - "high"
            - "middle"
            - "low"
        estimatedTime:
          type: number
          example: 900
          description: "카드 푸는데 걸리는 예상 소요 시간 (sec)"
        cardScore:
          type: "number"
          example: 71.88207
          description: "해당 카드의 점수 (보충 카드는 null)"
        cardDetail:
          type: "string"
          example: "{\"subSection\":\"순환소수\",\"section\":\"유리수와 순환소수\",\"chapter\":\"수와 식\"}"
          description: "카드 상세 정보를 담은 json string. \n1) 유형카드 : 유형이 속한 단원 이름. 'subSection'-'소단원 이름', 'section'-'중단원 이름', 'chapter'-'대단원 이름' \n2) 보충카드 : 보충 카드에 속한 유형 '이름'-'점수' \n3) 중간평가카드 : 중단원 내 소단원 (or 대단원 내 중단원) '이름'-'점수'\n4) 모의고사카드 : 시험범위 내 대단원 '이름'-'점수'"
        probIdSetList:
          type: "array"
          description: "상/중/하 난이도를 포함한 문제 ID 세트 목록"
          items:
            $ref: "#/components/schemas/ProbIdSetV1"
          example:
            - high: 10
              middle: 11
              low: 12
            - high: 20
              middle: 21
              low: 22
    CardObjectV2:
      type: "object"
      description: "카드 정보. 카드 내 유형 단위로 자르고, 유형 안에서 각 난이도 별 최대 5개 문제 제공"
      required:
        - "cardType"
        - "cardTitle"
        - "firstProbLevel"
        - "estimatedTime"
        - "cardScore"
        - "cardDetail"
        - "probIdList"
        - "probIdSetList"
      properties:
        cardType:
          type: "string"
          example: "type"
          enum:
            - "type"
            - "supple"
            - "section_test"
            - "chapter_test"
            - "addtl_supple"
            - "section_exam"
            - "full_scope_exam"
            - "trial_exam"
          description: "카드 종류. \nsection_test: 실력향상 중단원 중간평가. \n chapter_test: 시험대비 대단원 중간평가."
        cardTitle:
          type: "string"
          example: "유한소수와 무한소수"
          description: "카드 이름. UI 가이드 참고"
        firstProbLevel:
          type: "string"
          example: "high"
          description: "학생의 이해도 기반, 첫 번째 문제의 난이도"
          enum:
            - "high"
            - "middle"
            - "low"
        estimatedTime:
          type: number
          example: 900
          description: "카드 푸는데 걸리는 예상 소요 시간 (sec)"
        cardScore:
          type: "number"
          example: 71.88207
          description: "해당 카드의 점수 (보충 카드는 null)"
        cardDetail:
          type: "string"
          example: "{\"subSection\":\"순환소수\",\"section\":\"유리수와 순환소수\",\"chapter\":\"수와 식\"}"
          description: "카드 상세 정보를 담은 json string. \n1) 유형카드 : 유형이 속한 단원 이름. 'subSection'-'소단원 이름', 'section'-'중단원 이름', 'chapter'-'대단원 이름' \n2) 보충카드 : 보충 카드에 속한 유형 '이름'-'점수' \n3) 중간평가카드 : 중단원 내 소단원 (or 대단원 내 중단원) '이름'-'점수'\n4) 모의고사카드 : 시험범위 내 대단원 '이름'-'점수'\n5) 시험대비카드 : 중단원이 속한 대단원 이름. 'chapter'-'대단원 이름'"
        probIdSetList:
          type: "array"
          description: "상/중/하 난이도를 포함한 문제 ID 리스트 json 리스트. 각 json은 유형 내 모든 문제에 대한 정보임. 리스트 크기는 유형 개수만큼 주어짐."
          items:
            $ref: "#/components/schemas/ProbIdSetV2"
          example:
            - min: 2
              max: 5
              high: [1,2,3,10,11]
              middle: [4,5,6]
              low: [7,8,9]
            - min: 2
              max: 2
              high: [10,11]
              middle: []
              low: [13]
    ProbIdSetV1:
      type: "object"
      required:
        - "high"
        - "middle"
        - "low"
      properties:
        high:
          type: number
          example: 11
          description: "상 난이도 문제 Id"
        middle:
          type: number
          example: 12
          description: "중 난이도 문제 Id"
        low:
          type: number
          example: 13
          description: "하 난이도 문제 Id"
    ProbIdSetV2:
      type: "object"
      required:
        - "min"
        - "max"
        - "high"
        - "middle"
        - "low"
      properties:
        min:
          type: number
          description: 해당 유형 내에서 최소 내야하는 문제 수
        max:
          type: number
          description: 해당 유형 내에서 최대 낼 수 있는 문제 수
        high:
          type: array
          items:
            type: number
          example: [11, 12, 13]
          description: "상 난이도 문제 Id 리스트"
        middle:
          type: array
          items:
            type: number
          example: [21, 22, 23]
          description: "중 난이도 문제 Id 리스트"
        low:
          type: array
          items:
            type: number
          example: [31, 32]
          description: "하 난이도 문제 Id 리스트"
    ProbIdList:
      type: array
      description: "문제 ID 목록"
      items:
        type: "string"
      example:
        - "607"
        - "608"
        - "4673"
    CorrectList:
      type: array
      description: "문제 정답 여부 목록"
      items:
        type: "string"
        enum:
          - "true"
          - "false"
          - "pass"
      example: 
          - "true"
          - "false"
          - "pass"
    UserExamInfo:
      type: "object"
      description: "사용자 시험 정보. examStartDate과 examDueDate는 둘다 값이 있거나 null 이어야 함. startSubSectionId과 endSubSectionId는 둘다 값이 있거나 null 이어야 함. exceptSubSectionIdList는 nullable."
      required:
        - "examStartDate"
        - "examDueDate"
        - "targetScore"
        - "startSubSectionId"
        - "endSubSectionId"
        - "exceptSubSectionIdList"
      properties:
        examStartDate:
          type: "string"
          example: "2021-07-01"
          description: "시험 준비 시작 날짜. yyyy-mm-dd 형식"
        examDueDate:
          type: "string"
          example: "2021-07-14"
          description: "시험 날짜. yyyy-mm-dd 형식"
        targetScore:
          type: number
          example: 85
          description: "목표 시험 점수"
        startSubSectionId:
          type: string
          example: "중등-중3-1학-03-01-01"
          description: "시험 범위 시작 소단원 id"
        endSubSectionId:
          type: string
          example: "중등-중3-1학-04-01-04"
          description: "시험 범위 끝 소단원 id"
        exceptSubSectionIdList:
          type: array
          items:
            type: string
          example: 
            - "중등-중3-1학-04-01-01"
            - "중등-중3-1학-04-01-02"
          description: "시험 범위에 포함되지 않는 소단원 id 리스트"
    
    UserBasicInfo:
      type: object
      description: 학생 기본 정보
      required:
        - grade
        - name
      properties:
        grade:
          type: string
          example: "2"
          description: 학년
          enum:
            - "1"
            - "2"
            - "3"
        name:
          type: string
          example: "박평우"
          description: 학생 이름

    MasteryUpdateResult:
      type: "object"
      required:
        - "message"
      properties:
        message:
          type: "string"
          example: "Successfully update user mastery."
          description: "성공 여부 메시지"
    UserExamInfoResult:
      type: "object"
      required:
        - "message"
      properties:
        message:
          type: "string"
          example: "Successfully update user exam info."
          description: "성공 여부 메시지"
    UserBasicInfoResult:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: Successfully update user basic info.
          description: "성공 여부 메시지"
          
    FrequentCardResult:
      properties:
        resultMessage:
          type: string
          example: "Successfully Returned"
        cardType :
          type: string
          example: "빈출카드"
        probSetList:
          type: array
          description: "카드를 구성하는 빈출문제 리스트"
          items: 
            $ref: "#/components/schemas/FreqProblems"
          example:
            - probId: 1
            - probId: 2
            - probId: 3
        sectionSetList:
          type: array
          description: "추천된 빈출문제가 속해있는 중단원들과 이해도"
          items: 
            $ref: "#/components/schemas/FreqSectionMastery"    
          example:
            - section: "소인수분해"
              sectionMastery: 0.6
            - section: "정수와 유리수"
              sectionMastery: 0.5
          
    FreqProblems:
      type: object
      required:
          - "probId"
      properties:
        probId:
          type: number
          example: 1
          description: "카드를 구성하는 빈출문제 ID"
    FreqSectionMastery:
      type: object
      required:
          - "section"
          - "sectionMastery"
      properties:
        section:
          type: string
          example: "소인수분해"
          description: "중단원 이름"
        sectionMastery:
          type: number
          example: 0.6
          description: "중단원 이해도"
 

 
  responses:
    500-Generic:
      description: "500 에러에 대한 generic response"
      content:
        application/json:
          schema:
            type: object
            properties:
              errorCode:
                type: string
                description: "Error code"
                example: "ERR-1001"
              message:
                type: string
                description: "Error message"
                example : "Invalid token ID"
  parameters:
    UserToken:
      in: "header"
      name: "token"
      required: true
      description: "유저의 Access token"
      schema:
        type: "string"
        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOiJta2thbmcifQ.ZjD-h4zkD2t8GsqA9or7F8NAbKVGTGEnBEeNvpI8Z5o"
    DiagnosisType:
      in: path
      name: diagType
      required: true
      description: 진단 종류 (간단="simple" or 꼼꼼="in-depth")
      schema:
        type: "string"
        default: in-depth
    ProbIdList:
      in: path
      name: probIdList
      required: true
      description: 앞에서 푼 진단 10문제 (중복 체크)
      schema:
        type: array
        default:
          - 1633
          - 1687
          - 1541
          - 1588
          - 1234
          - 5678
          - 1111
          - 2222
          - 3333
          - 4444
    IsFirstFreq :
      in: path
      name: isFirstFrequent
      required: true
      description: 진단고사 직후 첫 진입 = 1
      schema:
        type: boolean
        default: 0
        
  requestBodies:
    ProblemSolveRecord:
      description: "학생 문제 풀이 기록"
      required: true
      content:
        application/json:
          schema:
            properties:
              probIdList:
                $ref: "#/components/schemas/ProbIdList"
              correctList:
                $ref: "#/components/schemas/CorrectList"
    UserExamInfo:
      description: "학생 시험 정보"
      required: true
      content:
        application/json:
          schema:
              $ref: "#/components/schemas/UserExamInfo"
    UserBasicInfo:
      description: "학생 기본 정보"
      required: true
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/UserBasicInfo"
            
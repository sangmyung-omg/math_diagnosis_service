image: docker:latest
services:
  - docker:dind 

variables:
  SPRING_PROFILES_ACTIVE: gitlab-ci
  DOCKER_DRIVER: overlay2
  SCRIPTS_DIR: ./config

stages:
  - version
  - build
  - package
  - deploy
  - push

java-build-check:
  image: java:8-jdk
  stage: build
  only:
    - /^ae1-3\/feature\/.*$/
    - /^ae1-3\/refactor\/.*$/
    - /^ae1-3\/fix\/.*$/
  script: 
    - cd WaplMath
    - ./gradlew build -x test
  artifacts:
    paths:
      - WaplMath/build/libs/*.jar
  tags:
    - lsh-build

java-build:
  image: java:8-jdk
  stage: build
  only:
    - ae1-3/dev
  script: 
    - cd WaplMath
    - ./gradlew build -x test
  artifacts:
    paths:
      - WaplMath/build/libs/*.jar
  tags:
    - lsh-local

docker-build:
  stage: package
  only:
    - ae1-3/dev
  script:
    - docker rm -f $CONTAINER_NAME 2>/dev/null || true
    - docker rmi -f $(docker images --format "{{.ID}} {{.Repository}}" | grep $IMAGE_NAME | awk '{print $1}') 2>/dev/null || true
    - docker build -t $IMAGE_NAME:$(date +%Y%m%d_%H%M) .
    - docker image ls
  tags:
    - lsh-local

docker-run:
  stage: deploy
  only:
    - ae1-3/dev
  script:
    - docker run -d -p 8080:8080 --name $CONTAINER_NAME $(docker images -q --filter "reference=$IMAGE_NAME")
    - docker container ls -a
  tags:
    - lsh-local

tags-push:
  image: python:3
  stage: version
  only:
    - master
  before_script:    
    # add ssh key with gitlab
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - ssh-keyscan -p $CI_SERVER_PORT $CI_SERVER_HOST >> ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts
  script:    
    # version generation script
    - pip3 install semver
    - chmod -R 755 $SCRIPTS_DIR
    - $SCRIPTS_DIR/gen-semver > version
  artifacts:
    paths:
      - version
  tags:
    - lsh-local
    
docker-push:
  stage: push
  only:
    - master
  before_script:
    - "[ -f ./version ] && export VERSION=$(cat ./version)"
    - echo $VERSION
  script:
    - docker login $HCDC_URL -u $HCDC_ID -p $HCDC_PASSWD
    - docker image tag $(docker images -q --filter "reference=$IMAGE_NAME") $HCDC_URL/$IMAGE_NAME:$VERSION
    - docker push $(docker images --format "{{.ID}} {{.Repository}} {{.Tag}}" | grep $HCDC_URL/$IMAGE_NAME | grep $VERSION | awk '{print $2":"$3}')
  tags:
    - lsh-local